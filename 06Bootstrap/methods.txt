MathMethod:
Math.ceil() //round up the number and return an integer 
Math.floor()//round down the number and return an integer 
Math.round() //rounds the decimal value as per the mathmatics and return an integer
Math.trunc() //give you the integer value from the decimal number (removing the decimal number)
Math.pow() // (5,2) => 5 times 5: (number,times)
Math.sqrt() //giving you the square root of number e,g) (Math.sqrt(49))//7
Math.cbrt()// giving you the cube root of number e,g) //4*4*4>64>4
Math.max() // find the largest number
Math.min() // find the smallest number
Math.random()//gives you the random number, decimal number also includes 
//Math.random() > 0-1 (1 is excluded)
//example: 0-10
Math.random()*10 //10 is excluded, random numbers from 0-9
Math.random()*10+1 //to include 10, random numbers from 0-10
parseInt() --> Converting into a integer, if it enncounters is between string, it will ignore, it encounters the string so it ignores the rest,
decimal values are also excluded
parseFloat() -->integer and decimal (Float): decimal values are known as float values, works for integer also
eg)  6.7 +6
     parseFloat >12.7
     parseInt   >12
.toFixed()--->
    ex) var num=45.78989898989
     console.log(num.toFixed(2))//45.78

Array Method:
array.push() // add  the element at the end of array
array.pop() //removing element at the end of the array || removing last element
array.shift() //removing the element from the begining of the array
array.unshift() // adding the element in the begining of the array
array.fill() // fill value with respect to the index number position --index start position (included) //index end position excluded //
array.includes() // weather that value is present or not inside the array --return type is> boolean true /false
Array.isArray() //check weather it's array or not -- return type is  boolean , true/false
array.every() //check the all the elements, boolean  
array.some() // check partial elements, boolean --test the consistion, if the condition is passes for anyone element 
array.reverse() // reverse the order of array
array.concat() // returns a new array by bring together to 1 array form
array.join()//join together the array elements with respect to the argument passed in the ()
array.reduce()//reduces to a single value and returns of single value, no boolean no array
array.filter()//filter the true valu and returns the new array of the filter value
array.map()//transforms the array and return the new array

String Method:
//toString()--convert values(any types) to string, return string itself
//match()--check if the character exist in the string and show where is located in the string and it returns to the array for the character/word, if it doesnt exist, it gives "null" - array
//includes()--check if the character exist in the string--return boolean values
//trim()--remove the space from the begining and ending of the string--return string without spaces
//trimEnd()--remove the space from ending of the string--return string
//trimStart()--remove the space from begining of the string--return string
//replace()--replace the words within the string--1st word only get updated--return string with updated word
//replaceAll()--replace the words within the string--All the word (you specify) will be
updated -- return string
//repeat()--repeat the same string Ã—(the times you specify)--return string ex)array.repeat(3:number of times you want repeat)
//toLowerCase()--change the entire string letters into lowercase--return string in lowercase
//toUpperCase()--change the entire string letters into uppercase--return string in uppercase
//split()--spit the letters/words where/what you want to split -- return string
//concat()--join together the more than 2 strings and return to Array--return array
//endWith()-- depending on the arguments you provided inside() if string ends with that character/words--return type: boolean
//slice()--return the string start position & end position -start position is included & end position is excluded- return string
//substring()--return the string start position(included) & end position (exclused)